buildscript {
    dependencies {
        classpath 'org.fusesource.jansi:jansi:2.4.0'
        classpath localGroovy()
    }
}

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'idea'
    id 'jacoco'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'com.github.kt3k.coveralls' version '2.12.2'
}

def thisPlugin =
    new GroovyScriptEngine(file('src/main/groovy').absolutePath, this.class.classLoader)
        .loadScriptByName('com/adarshr/gradle/testlogger/TestLoggerPlugin.groovy')

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/coverage.gradle'
apply plugin: thisPlugin

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/test-functional/groovy'
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    testImplementation gradleTestKit()
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.10'
    testImplementation 'org.objenesis:objenesis:3.3'
    testImplementation 'commons-io:commons-io:2.14.0'

    functionalTestImplementation gradleTestKit()
    functionalTestImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    functionalTestImplementation 'commons-io:commons-io:2.14.0'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

gradlePlugin {
    plugins {
        testLoggerPlugin {
            id = 'com.adarshr.test-logger'
            implementationClass = 'com.adarshr.gradle.testlogger.TestLoggerPlugin'
        }
    }
}

idea {
    module {
        testSourceDirs += file('src/test-functional/groovy')
    }
}

tasks.named("test") {
    useJUnitPlatform()

    testClassesDirs += sourceSets.functionalTest.output.classesDirs
    classpath += sourceSets.functionalTest.runtimeClasspath
    systemProperty 'file.encoding', 'UTF-8'

    testlogger {
        theme 'mocha'
    }

    exclude 'com/adarshr/gradle/testlogger/functional/**'
}

tasks.register("functionalTest", Test) {
    dependsOn 'pluginUnderTestMetadata', 'testClasses'

    useJUnitPlatform()

    inputs.dir "$projectDir/src/test-functional/resources"
    maxParallelForks = 2
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath + sourceSets.functionalTest.runtimeClasspath
    systemProperty 'file.encoding', 'UTF-8'
    minHeapSize '128m'
    maxHeapSize '512m'

    testlogger {
        theme 'mocha-parallel'
    }

    include 'com/adarshr/gradle/testlogger/functional/**'
}

tasks.named("check") {
    dependsOn("functionalTest")
}
